(window.webpackJsonp=window.webpackJsonp||[]).push([[598],{1052:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,O=p["".concat(o,".").concat(m)]||p[m]||s[m]||i;return n?r.a.createElement(O,l(l({ref:t},c),{},{components:n})):r.a.createElement(O,l({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var b in t)hasOwnProperty.call(t,b)&&(l[b]=t[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},671:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(8),i=(n(0),n(1052)),o={title:"Configuration"},l={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"Entity Discovery",source:"@site/docs/configuration.md",slug:"/configuration",permalink:"/docs/next/configuration",editUrl:"https://github.com/mikro-orm/mikro-orm/edit/master/docs/docs/configuration.md",version:"current",lastUpdatedBy:"renovate[bot]",lastUpdatedAt:1615844866,formattedLastUpdatedAt:"3/15/2021",sidebar:"docs",previous:{title:"Decorators",permalink:"/docs/next/decorators"},next:{title:"Usage with MySQL, MariaDB, PostgreSQL or SQLite",permalink:"/docs/next/usage-with-sql"}},b=[{value:"Entity Discovery",id:"entity-discovery",children:[]},{value:"Driver",id:"driver",children:[]},{value:"Connection",id:"connection",children:[]},{value:"Naming Strategy",id:"naming-strategy",children:[]},{value:"Auto-join of 1:1 owners",id:"auto-join-of-11-owners",children:[]},{value:"Propagation of 1:1 and m:1 owners",id:"propagation-of-11-and-m1-owners",children:[]},{value:"Forcing UTC Timezone",id:"forcing-utc-timezone",children:[]},{value:"Mapping <code>null</code> values to <code>undefined</code>",id:"mapping-null-values-to-undefined",children:[]},{value:"Custom Hydrator",id:"custom-hydrator",children:[]},{value:"Custom Repository",id:"custom-repository",children:[]},{value:"Strict Mode and property validation",id:"strict-mode-and-property-validation",children:[]},{value:"Debugging &amp; Logging",id:"debugging--logging",children:[]},{value:"Custom Fail Handler",id:"custom-fail-handler",children:[]},{value:"Migrations",id:"migrations",children:[]},{value:"Caching",id:"caching",children:[]},{value:"Importing database dump files (MySQL and PostgreSQL)",id:"importing-database-dump-files-mysql-and-postgresql",children:[]},{value:"Using native private properties",id:"using-native-private-properties",children:[]},{value:"Using environment variables",id:"using-environment-variables",children:[]}],c={toc:b};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"entity-discovery"},"Entity Discovery"),Object(i.b)("p",null,"You can either provide array of entity instances via ",Object(i.b)("inlineCode",{parentName:"p"},"entities"),", or let the ORM look up your\nentities in selected folders. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  entities: [Author, Book, Publisher, BookTag],\n});\n")),Object(i.b)("p",null,"We can also use folder based discovery by providing list of paths to the entities\nwe want to discover (globs are supported as well). This way we also need to specify\n",Object(i.b)("inlineCode",{parentName:"p"},"entitiesTs"),", where we point the paths to the TS source files instead of the JS\ncompiled files (see more at ",Object(i.b)("a",{parentName:"p",href:"/docs/next/metadata-providers"},"Metadata Providers"),")."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"entitiesTs")," option is used when running the app via ",Object(i.b)("inlineCode",{parentName:"p"},"ts-node"),", as the ORM\nneeds to discover the TS files. Always specify this option if you use folder/file\nbased discovery. ")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  entities: ['./dist/modules/users/entities', './dist/modules/projects/entities'],\n  entitiesTs: ['./src/modules/users/entities', './src/modules/projects/entities'],\n  // optionally you can override the base directory (defaults to `process.cwd()`)\n  baseDir: process.cwd(),\n});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Be careful when overriding the ",Object(i.b)("inlineCode",{parentName:"p"},"baseDir")," with dynamic values like ",Object(i.b)("inlineCode",{parentName:"p"},"__dirname"),",\nas you can end up with valid paths from ",Object(i.b)("inlineCode",{parentName:"p"},"ts-node"),", but invalid paths from ",Object(i.b)("inlineCode",{parentName:"p"},"node"),".\nIdeally you should keep the default of ",Object(i.b)("inlineCode",{parentName:"p"},"process.cwd()")," there to always have the\nsame base path regardless of how you run the app.")),Object(i.b)("p",null,"By default, ",Object(i.b)("inlineCode",{parentName:"p"},"ReflectMetadataProvider")," is used that leverages the ",Object(i.b)("inlineCode",{parentName:"p"},"reflect-metadata"),".\nYou can also use ",Object(i.b)("inlineCode",{parentName:"p"},"TsMorphMetadataProvider")," by installing ",Object(i.b)("inlineCode",{parentName:"p"},"@mikro-orm/reflection"),".\nThis provider will analyse your entity source files (or ",Object(i.b)("inlineCode",{parentName:"p"},".d.ts")," type definition files).\nIf you aim to use plain JavaScript instead of TypeScript, use ",Object(i.b)("inlineCode",{parentName:"p"},"EntitySchema")," or\nthe ",Object(i.b)("inlineCode",{parentName:"p"},"JavaScriptMetadataProvider"),"."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can also implement your own metadata provider and use it instead. To do so, extend the\n",Object(i.b)("inlineCode",{parentName:"p"},"MetadataProvider")," class.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { MikroORM } from '@mikro-orm/core';\nimport { TsMorphMetadataProvider } from '@mikro-orm/reflection';\n\nMikroORM.init({\n  metadataProvider: TsMorphMetadataProvider,\n});\n")),Object(i.b)("p",null,"There are also some additional options how you can adjust the discovery process:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  discovery: {\n    warnWhenNoEntities: false, // by default, discovery throws when no entity is processed\n    requireEntitiesArray: true, // force usage of class refrences in `entities` instead of paths\n    alwaysAnalyseProperties: false, // do not analyse properties when not needed (with ts-morph)\n  },\n});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"If you disable ",Object(i.b)("inlineCode",{parentName:"p"},"discovery.alwaysAnalyseProperties")," option, you will need to explicitly\nprovide ",Object(i.b)("inlineCode",{parentName:"p"},"nullable")," and ",Object(i.b)("inlineCode",{parentName:"p"},"wrappedReference")," parameters (where applicable).")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/metadata-providers"},"Metadata Providers")," sections."),Object(i.b)("h2",{id:"driver"},"Driver"),Object(i.b)("p",null,"To select driver, you can either use ",Object(i.b)("inlineCode",{parentName:"p"},"type")," option, or provide the driver class reference."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"type"),Object(i.b)("th",{parentName:"tr",align:null},"driver name"),Object(i.b)("th",{parentName:"tr",align:null},"dependency"),Object(i.b)("th",{parentName:"tr",align:null},"note"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mongo")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MongoDriver")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mongodb^3.3.4")),Object(i.b)("td",{parentName:"tr",align:null},"-")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mysql")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MySqlDriver")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mysql2^2.0.0")),Object(i.b)("td",{parentName:"tr",align:null},"compatible with MariaDB")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mariadb")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MariaDbDriver")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mariadb^2.0.0")),Object(i.b)("td",{parentName:"tr",align:null},"compatible with MySQL")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"postgresql")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"PostgreSqlDriver")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"pg^7.0.0")),Object(i.b)("td",{parentName:"tr",align:null},"-")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"sqlite")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"SqliteDriver")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"sqlite3^4.0.0")),Object(i.b)("td",{parentName:"tr",align:null},"-")))),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Driver and connection implementations are not directly exported from ",Object(i.b)("inlineCode",{parentName:"p"},"@mikro-orm/core")," module.\nYou can import them from the driver packages (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"import { PostgreSqlDriver } from '@mikro-orm/postgresql'"),").")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can pass additional options to the underlying driver (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"mysql2"),") via ",Object(i.b)("inlineCode",{parentName:"p"},"driverOptions"),".\nThe object will be deeply merged, overriding all internally used options.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"import { MySqlDriver } from '@mikro-orm/mysql';\n\nMikroORM.init({\n  driver: MySqlDriver,\n  driverOptions: { connection: { timezone: '+02:00' } },\n});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"From v3.5.1 you can also set the timezone directly in the ORM configuration:"),Object(i.b)("pre",{parentName:"blockquote"},Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  type: 'mysql',\n  timezone: '+02:00',\n});\n"))),Object(i.b)("h2",{id:"connection"},"Connection"),Object(i.b)("p",null,"Each platform (driver) provides default connection string, you can override it as a whole\nthrough ",Object(i.b)("inlineCode",{parentName:"p"},"clientUrl"),", or partially through one of following options:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"export interface ConnectionOptions {\n  dbName?: string;\n  name?: string; // for logging only (when replicas are used)\n  clientUrl?: string;\n  host?: string;\n  port?: number;\n  user?: string;\n  password?: string;\n  charset?: string;\n  multipleStatements?: boolean; // for mysql driver\n  pool?: PoolConfig; // provided by `knex`\n}\n")),Object(i.b)("p",null,"Following table shows default client connection strings:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"type"),Object(i.b)("th",{parentName:"tr",align:null},"default connection url"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mongo")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mongodb://127.0.0.1:27017"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mysql")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mysql://root@127.0.0.1:3306"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mariadb")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"mysql://root@127.0.0.1:3306"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"postgresql")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"postgresql://postgres@127.0.0.1:5432"))))),Object(i.b)("p",null,"To set up read replicas, you can use ",Object(i.b)("inlineCode",{parentName:"p"},"replicas")," option. You can provide only those parts of the\n",Object(i.b)("inlineCode",{parentName:"p"},"ConnectionOptions")," interface, they will be used to override the ",Object(i.b)("inlineCode",{parentName:"p"},"master")," connection options."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  type: 'mysql',\n  dbName: 'my_db_name',\n  user: 'write-user',\n  host: 'master.db.example.com',\n  port: 3306,\n  replicas: [\n    { user: 'read-user-1', host: 'read-1.db.example.com', port: 3307 },\n    { user: 'read-user-2', host: 'read-2.db.example.com', port: 3308 },\n    { user: 'read-user-3', host: 'read-3.db.example.com', port: 3309 },\n  ],\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/installation"},"Installation")," and ",Object(i.b)("a",{parentName:"p",href:"/docs/next/read-connections"},"Read Connections")," sections."),Object(i.b)("h2",{id:"naming-strategy"},"Naming Strategy"),Object(i.b)("p",null,"When mapping your entities to database tables and columns, their names will be defined by naming\nstrategy. There are 3 basic naming strategies you can choose from:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"UnderscoreNamingStrategy")," - default of all SQL drivers"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"MongoNamingStrategy")," - default of ",Object(i.b)("inlineCode",{parentName:"li"},"MongoDriver")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"EntityCaseNamingStrategy")," - uses unchanged entity and property names")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can also define your own custom ",Object(i.b)("inlineCode",{parentName:"p"},"NamingStrategy")," implementation.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  namingStrategy: EntityCaseNamingStrategy,\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/naming-strategy"},"Naming Strategy")," section."),Object(i.b)("h2",{id:"auto-join-of-11-owners"},"Auto-join of 1:1 owners"),Object(i.b)("p",null,"By default, owning side of 1:1 relation will be auto-joined when you select the inverse side\nso we can have the reference to it. You can disable this behaviour via ",Object(i.b)("inlineCode",{parentName:"p"},"autoJoinOneToOneOwner"),"\nconfiguration toggle."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  autoJoinOneToOneOwner: false,\n});\n")),Object(i.b)("h2",{id:"propagation-of-11-and-m1-owners"},"Propagation of 1:1 and m:1 owners"),Object(i.b)("p",null,"MikroORM defines getter and setter for every owning side of m:1 and 1:1 relation. This is\nthen used for propagation of changes to the inverse side of bi-directional relations."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"const author = new Author('n', 'e');\nconst book = new Book('t');\nbook.author = author;\nconsole.log(author.books.contains(book)); // true\n")),Object(i.b)("p",null,"You can disable this behaviour via ",Object(i.b)("inlineCode",{parentName:"p"},"propagateToOneOwner")," option."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  propagateToOneOwner: false,\n});\n")),Object(i.b)("h2",{id:"forcing-utc-timezone"},"Forcing UTC Timezone"),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"forceUtcTimezone")," option to force the ",Object(i.b)("inlineCode",{parentName:"p"},"Date"),"s to be saved in UTC in datetime columns\nwithout timezone. It works for MySQL (",Object(i.b)("inlineCode",{parentName:"p"},"datetime")," type) and PostgreSQL (",Object(i.b)("inlineCode",{parentName:"p"},"timestamp")," type).\nSQLite does this by default. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  forceUtcTimezone: true,\n});\n")),Object(i.b)("h2",{id:"mapping-null-values-to-undefined"},"Mapping ",Object(i.b)("inlineCode",{parentName:"h2"},"null")," values to ",Object(i.b)("inlineCode",{parentName:"h2"},"undefined")),Object(i.b)("p",null,"By default ",Object(i.b)("inlineCode",{parentName:"p"},"null")," values from nullable database columns are hydrated as ",Object(i.b)("inlineCode",{parentName:"p"},"null"),".\nUsing ",Object(i.b)("inlineCode",{parentName:"p"},"forceUndefined")," we can tell the ORM to convert those ",Object(i.b)("inlineCode",{parentName:"p"},"null")," values to\n",Object(i.b)("inlineCode",{parentName:"p"},"undefined")," instead. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  forceUndefined: true,\n});\n")),Object(i.b)("h2",{id:"custom-hydrator"},"Custom Hydrator"),Object(i.b)("p",null,"Hydrator is responsible for assigning values from the database to entities.\nYou can implement your custom ",Object(i.b)("inlineCode",{parentName:"p"},"Hydrator")," (by extending the abstract ",Object(i.b)("inlineCode",{parentName:"p"},"Hydrator")," class):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  hydrator: MyCustomHydrator,\n});\n")),Object(i.b)("h2",{id:"custom-repository"},"Custom Repository"),Object(i.b)("p",null,"You can also register custom base repository (for all entities where you do not specify\n",Object(i.b)("inlineCode",{parentName:"p"},"customRepository"),") globally:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"You can still use entity specific repositories in combination with global base repository.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  entityRepository: CustomBaseRepository,\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/repositories"},"Repositories")," section."),Object(i.b)("h2",{id:"strict-mode-and-property-validation"},"Strict Mode and property validation"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Since v4.0.3 the validation needs to be explicitly enabled via ",Object(i.b)("inlineCode",{parentName:"p"},"validate: true"),".\nIt has performance implications and usually should not be needed, as long as\nyou don't modify your entities via ",Object(i.b)("inlineCode",{parentName:"p"},"Object.assign()"),".")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"MirkoORM")," will validate your properties before actual persisting happens. It will try to fix wrong\ndata types for you automatically. If automatic conversion fails, it will throw an error. You can\nenable strict mode to disable this feature and let ORM throw errors instead. Validation is triggered\nwhen persisting the entity. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  validate: true,\n  strict: true,\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/property-validation"},"Property Validation")," section."),Object(i.b)("h2",{id:"debugging--logging"},"Debugging & Logging"),Object(i.b)("p",null,"You can enable logging with ",Object(i.b)("inlineCode",{parentName:"p"},"debug")," option. Either set it to ",Object(i.b)("inlineCode",{parentName:"p"},"true")," to log everything, or\nprovide array of ",Object(i.b)("inlineCode",{parentName:"p"},"'query' | 'query-params' | 'discovery' | 'info'")," namespaces."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  logger: (message: string) => myLogger.info(message), // defaults to `console.log()`\n  debug: true, // or provide array like `['query', 'query-params']`\n  highlight: false, // defaults to true\n  highlightTheme: { ... }, // you can also provide custom highlight there\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/debugging"},"Debugging")," section."),Object(i.b)("h2",{id:"custom-fail-handler"},"Custom Fail Handler"),Object(i.b)("p",null,"When no entity is found during ",Object(i.b)("inlineCode",{parentName:"p"},"em.findOneOrFail()")," call, ",Object(i.b)("inlineCode",{parentName:"p"},"new Error()")," will be thrown.\nYou can customize how the ",Object(i.b)("inlineCode",{parentName:"p"},"Error")," instance is created via ",Object(i.b)("inlineCode",{parentName:"p"},"findOneOrFailHandler"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  findOneOrFailHandler: (entityName: string, where: Dictionary | IPrimaryKey) => {\n    return new NotFoundException(`${entityName} not found!`);\n  },\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/entity-manager#handling-not-found-entities"},"Entity Manager")," docs."),Object(i.b)("h2",{id:"migrations"},"Migrations"),Object(i.b)("p",null,"Under the ",Object(i.b)("inlineCode",{parentName:"p"},"migrations")," namespace, you can adjust how the integrated migrations support works.\nFollowing example shows all possible options and their defaults:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  migrations: {\n    tableName: 'mikro_orm_migrations', // migrations table name\n    path: process.cwd() + '/migrations', // path to folder with migration files\n    pattern: /^[\\w-]+\\d+\\.ts$/, // how to match migration files\n    transactional: true, // run each migration inside transaction\n    disableForeignKeys: true, // try to disable foreign_key_checks (or equivalent)\n    allOrNothing: true, // run all migrations in current batch in master transaction\n    emit: 'ts', // migration generation mode\n  },\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/migrations"},"Migrations")," section."),Object(i.b)("h2",{id:"caching"},"Caching"),Object(i.b)("p",null,"By default, metadata discovery results are cached. You can either disable caching, or adjust\nhow it works. Following example shows all possible options and their defaults:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  cache: {\n    enabled: true,\n    pretty: false, // allows to pretty print the JSON cache\n    adapter: FileCacheAdapter, // you can provide your own implementation here, e.g. with redis\n    options: { cacheDir: process.cwd() + '/temp' }, // options will be passed to the constructor of `adapter` class\n  },\n});\n")),Object(i.b)("p",null,"Read more about this in ",Object(i.b)("a",{parentName:"p",href:"/docs/next/metadata-cache"},"Metadata Cache")," section."),Object(i.b)("h2",{id:"importing-database-dump-files-mysql-and-postgresql"},"Importing database dump files (MySQL and PostgreSQL)"),Object(i.b)("p",null,"Using the ",Object(i.b)("inlineCode",{parentName:"p"},"mikro-orm database:import db-file.sql")," you can import a database dump file. This can be useful when kickstarting an application or could be used in tests to reset the database. Database dumps often have queries spread over multiple lines and therefore you need the following configuration."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-typescript"},"MikroORM.init({\n  ...\n  multipleStatements: true,\n  ...\n});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"This should be disabled in production environments for added security.")),Object(i.b)("h2",{id:"using-native-private-properties"},"Using native private properties"),Object(i.b)("p",null,"If we want to use native private properties inside entities, the default approach of\nhow MikroORM creates entity instances via ",Object(i.b)("inlineCode",{parentName:"p"},"Object.create()")," is not viable (more about this\nin the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/mikro-orm/mikro-orm/issues/1226"},"issue"),"). To force usage of entity\nconstructors, we can use ",Object(i.b)("inlineCode",{parentName:"p"},"forceEntityConstructor")," toggle:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-ts"},"MikroORM.init({\n  ...\n  forceEntityConstructor: true, // or specify just some entities via `[Author, 'Book', ...]` \n  ...\n});\n")),Object(i.b)("h2",{id:"using-environment-variables"},"Using environment variables"),Object(i.b)("p",null,"Since v4.5 it is possible to set most of the ORM options via environment variables.\nBy default ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file from the root directory is loaded - it is also possible to\nset full path to the env file you want to use via ",Object(i.b)("inlineCode",{parentName:"p"},"MIKRO_ORM_ENV")," environment variable."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Environment variables always have precedence.")),Object(i.b)("p",null,"Example ",Object(i.b)("inlineCode",{parentName:"p"},".env")," file:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dotenv"},"MIKRO_ORM_TYPE = sqlite\nMIKRO_ORM_ENTITIES = ./dist/foo/*.entity.js, ./dist/bar/*.entity.js\nMIKRO_ORM_ENTITIES_TS = ./src/foo/*.entity.ts, ./src/bar/*.entity.ts\nMIKRO_ORM_DB_NAME = test.db\nMIKRO_ORM_MIGRATIONS_PATH = ./dist/migrations\nMIKRO_ORM_MIGRATIONS_PATTERN = ^[\\w-]+\\d+\\.js$\nMIKRO_ORM_POPULATE_AFTER_FLUSH = true\nMIKRO_ORM_FORCE_ENTITY_CONSTRUCTOR = true\nMIKRO_ORM_FORCE_UNDEFINED = true\n")),Object(i.b)("p",null,"Full list of supported options:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"env variable"),Object(i.b)("th",{parentName:"tr",align:null},"config key"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_BASE_DIR")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"baseDir"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_TYPE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"type"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_ENTITIES")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"entities"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_ENTITIES_TS")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"entitiesTs"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_CLIENT_URL")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"clientUrl"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_HOST")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"host"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_PORT")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"port"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_USER")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"user"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_PASSWORD")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"password"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_DB_NAME")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"dbName"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_LOAD_STRATEGY")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"loadStrategy"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_BATCH_SIZE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"batchSize"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_USE_BATCH_INSERTS")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"useBatchInserts"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_USE_BATCH_UPDATES")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"useBatchUpdates"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_STRICT")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"strict"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_VALIDATE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"validate"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_AUTO_JOIN_ONE_TO_ONE_OWNER")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"autoJoinOneToOneOwner"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_PROPAGATE_TO_ONE_OWNER")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"propagateToOneOwner"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_POPULATE_AFTER_FLUSH")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"populateAfterFlush"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_FORCE_ENTITY_CONSTRUCTOR")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forceEntityConstructor"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_FORCE_UNDEFINED")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forceUndefined"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_FORCE_UTC_TIMEZONE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"forceUtcTimezone"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_TIMEZONE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"timezone"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_ENSURE_INDEXES")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"ensureIndexes"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_IMPLICIT_TRANSACTIONS")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"implicitTransactions"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_DEBUG")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"debug"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_VERBOSE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"verbose"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_DISCOVERY_WARN_WHEN_NO_ENTITIES")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"discovery.warnWhenNoEntities"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_DISCOVERY_REQUIRE_ENTITIES_ARRAY")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"discovery.requireEntitiesArray"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_DISCOVERY_ALWAYS_ANALYSE_PROPERTIES")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"discovery.alwaysAnalyseProperties"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_DISCOVERY_DISABLE_DYNAMIC_FILE_ACCESS")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"discovery.disableDynamicFileAccess"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_TABLE_NAME")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.tableName"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_PATH")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.path"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_PATTERN")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.pattern"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_TRANSACTIONAL")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.transactional"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_DISABLE_FOREIGN_KEYS")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.disableForeignKeys"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_ALL_OR_NOTHING")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.allOrNothing"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_DROP_TABLES")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.dropTables"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_SAFE")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.safe"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"MIKRO_ORM_MIGRATIONS_EMIT")),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"migrations.emit"))))))}d.isMDXComponent=!0}}]);